/// <reference types="@workadventure/iframe-api-typings" />

/**
 * Simple Marvie dialogue module.
 * Binds the Tiled area named "MarvieZone" and shows a single popup on enter.
 * Closes the popup on leave to avoid stacking.
 */

let marviePopupRef: any | undefined;

function closeMarviePopup() {
  if (marviePopupRef) {
    try { marviePopupRef.close?.(); } catch (e) { /* ignore */ }
    marviePopupRef = undefined;
  }
}

/**
 * Read custom message from the Tiled object if available.
 * If WA.room.object is available the API may expose object custom props.
 * We attempt a safe read; if not available, fallback to default message.
 */
function getMessageForZone(): string {
  try {
    // WA.room.object.get is not part of the public typings in some builds,
    // but WorkAdventure frequently exposes ways to read object custom properties.
    // We'll attempt a couple safe reads; if none present, fallback below.
    const obj = (WA.room as any).object?.get?.("MarvieZone");
    if (obj && obj.properties) {
      // property could be an array of {name, value} or an object depending on export
      const props = obj.properties;
      if (Array.isArray(props)) {
        const p = props.find((x: any) => x.name === "marvieMessage" || x.name === "marviePopup");
        if (p && p.value) return String(p.value);
      } else if (props.marvieMessage) {
        return String(props.marvieMessage);
      }
    }
  } catch (e) {
    // non-fatal - we'll use default message
  }

  // Default message (editable)
  return [
    "ðŸ‘‹ Hi â€” I'm Marvie.",
    "",
    "This is the malware lab (simulated). Don't open unknown files or click unfamiliar links.",
    "This popup is just a simulation for training. Walk away to close.",
  ].join("\n");
}

export function initMarvie() {
  // make sure we don't create multiple listeners if called multiple times
  console.log("[Marvie] initMarvie called");

  // Enter
  WA.room.area.onEnter("MarvieZone").subscribe(() => {
    console.log("[Marvie] player entered MarvieZone");
    // Close any other Marvie popup to avoid stacking
    closeMarviePopup();

    const message = getMessageForZone();

    marviePopupRef = WA.ui.openPopup("marviePopup", message, [
      {
        label: "Got it",
        callback: () => {
          closeMarviePopup();
        },
      },
      // optional second button example:
      // {
      //   label: "Learn more",
      //   callback: () => {
      //     closeMarviePopup();
      //     // WA.nav.goToRoom("maps/canteen.tmj#from-hall"); // example nav
      //   }
      // }
    ]);
  });

  // Leave
  WA.room.area.onLeave("MarvieZone").subscribe(() => {
    console.log("[Marvie] player left MarvieZone -> closing popup");
    closeMarviePopup();
  });

  // Safety: when leaving map or hot-reload
  try {
    WA.onLeave?.(() => closeMarviePopup());
  } catch (e) { /* ignore if not available */ }
}
